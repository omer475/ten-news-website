name: Generate Daily News
on:
  schedule:
    # Run at specific times that should be close to 7 AM UK time
    # Multiple entries to handle both GMT and BST periods
    - cron: '0 6 * * *'   # 6:00 AM UTC (7:00 AM UK during BST - Mar to Oct)
    - cron: '5 6 * * *'   # 6:05 AM UTC (7:05 AM UK during BST) - backup for delays
    - cron: '0 7 * * *'   # 7:00 AM UTC (7:00 AM UK during GMT - Oct to Mar)
    - cron: '5 7 * * *'   # 7:05 AM UTC (7:05 AM UK during GMT) - backup for delays
  workflow_dispatch:  # Manual trigger (always allowed)

jobs:
  generate-news:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: Europe/London  # Set timezone for the entire job
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # fetch full history to allow rebase before push
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Python dependencies
        run: |
          pip install requests beautifulsoup4 pytz schedule
          
      - name: Generate daily news
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          NEWSLETTER_SECRET: ${{ secrets.NEWSLETTER_SECRET }}
        run: |
          # For scheduled runs, check if we're within 7 AM UK time window
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # Get current UK time
            CURRENT_UK_HOUR=$(TZ=Europe/London date +%H)
            CURRENT_UK_MIN=$(TZ=Europe/London date +%M)
            
            echo "üìÖ Current UK time: $(TZ=Europe/London date '+%Y-%m-%d %H:%M %Z')"
            echo "üéØ Target time: 07:00 UK time"
            
            # Check if we're in the 7 AM hour (7:00-7:59)
            if [ "$CURRENT_UK_HOUR" -ne "7" ]; then
              echo "‚è≠ Not in the 7 AM hour. Current hour: $CURRENT_UK_HOUR. Skipping scheduled run."
              exit 0
            fi
            
            # Check if today's file already exists
            TODAY_FILE="tennews_data_$(date +%Y_%m_%d).json"
            if [ -f "$TODAY_FILE" ]; then
              echo "‚è≠ $TODAY_FILE already exists. News generation completed today."
              exit 0
            fi
          fi
          
          echo "ü§ñ Starting news generation..."
          python news-generator.py <<< "1"
          
      - name: Send newsletter
        if: success()
        run: |
          # Send newsletter after successful news generation
          TODAY_FILE="tennews_data_$(date +%Y_%m_%d).json"
          if [ -f "$TODAY_FILE" ]; then
            echo "üìß Sending daily newsletter..."
            
            # Install Node.js dependencies for newsletter sending
            npm install
            
            # Send newsletter using the generated news data
            node -e "
            const fs = require('fs');
            const path = require('path');
            
            async function sendNewsletter() {
              try {
                const todayFile = '$TODAY_FILE';
                const newsData = JSON.parse(fs.readFileSync(todayFile, 'utf8'));
                
                const response = await fetch('${{ github.server_url }}/${{ github.repository }}/api/send-newsletter', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    secret: process.env.NEWSLETTER_SECRET,
                    newsData: newsData
                  })
                });
                
                if (response.ok) {
                  const result = await response.json();
                  console.log('‚úÖ Newsletter sent:', result.message);
                } else {
                  console.log('‚ùå Newsletter failed:', await response.text());
                }
              } catch (error) {
                console.log('‚ùå Newsletter error:', error.message);
              }
            }
            
            sendNewsletter();
            "
          else
            echo "‚ö†Ô∏è No news file found, skipping newsletter"
          fi
          
      - name: Commit and push generated news
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
          # Make sure we are up to date before committing/pushing
          git fetch origin main
          git pull --rebase origin main || true
          
          # Add generated JSON files (no more processing logs)
          git add tennews_data_*.json historical_events_*.json
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üóûÔ∏è Daily news update $(date +'%Y-%m-%d %H:%M UTC')"
            git push origin HEAD:main
          fi
